{"version":3,"file":"soundtouch-audio-node.js","sources":["../src/minsSecs.js","../src/createSoundTouchNode.js"],"sourcesContent":["const pad = function (n, width, z) {\n  z = z || '0';\n  n = n + '';\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n};\n\nconst minsSecs = function (secs) {\n  const mins = Math.floor(secs / 60);\n  const seconds = secs - mins * 60;\n  return `${mins}:${pad(parseInt(seconds), 2)}`;\n};\n\nexport const diffSecs = function (ms1, ms2) {\n  return (ms2 - ms1) / 1000;\n};\n\nexport default minsSecs;\n","import minsSecs, { diffSecs } from './minsSecs';\n\n/** Documentation can be found in the `/docs/SoundTouchNode.md` file */\n\n/**\n *\n * @param {AudioContext} audioCtx - an AudioContext instance\n * @param {AudioWorkletNode} AudioWorkletNode - actual node, be it window.AudioWorkletNode, or ponyfill\n * @param {ArrayBuffer} arrayBuffer - the raw undecoded audio data\n * @param {*} options - not really used yet\n * @return {SoundTouchNode} - a SoundTouchNode instance\n */\nconst createSoundTouchNode = (\n  audioCtx,\n  AudioWorkletNode,\n  arrayBuffer,\n  options\n) => {\n  class SoundTouchNode extends AudioWorkletNode {\n    /**\n     * @constructor\n     * @param {BaseAudioContext} context The associated BaseAudioContext.\n     * @param {ArrayBuffer} arrayBuffer fixed length raw binary data buffer (undecoded audio)\n     * @param {AudioWorkletNodeOptions} options User-supplied options for\n     * AudioWorkletNode.\n     */\n    constructor(context, arrayBuffer, options) {\n      super(context, 'soundtouch-worklet', options);\n\n      // Copy the passed ArrayBuffer, so it doesn't become detached and can be reused\n      this._arrayBuffer = arrayBuffer.slice(0);\n      // an array of all of the listeners\n      this.listeners = [];\n      // setup our Worklet to Node messaging listener\n      this.port.onmessage = this._messageProcessor.bind(this);\n      /* play/pause time tracking variables */\n      this.sourcePosition = 0;\n      this.timePlayed = 0;\n      this._startTime = 0;\n      this._pauseTime = 0;\n      this._playHead = 0;\n\n      this._playing = false;\n      this._ready = false;\n      // for standardized-audio-context implementation\n      this._initialPlay = true;\n    }\n\n    /**\n     * @formattedDuration (getter)\n     * @return {String} the audioBuffer.duration (which is in seconds) in mm:ss format\n     */\n    get formattedDuration() {\n      return minsSecs(this.duration);\n    }\n\n    /**\n     * @formattedTimePlayed (getter)\n     * @return {String} the SoundTouchNode.timePlayed (which is in seconds) in mm:ss format\n     */\n    get formattedTimePlayed() {\n      return minsSecs(this.timePlayed);\n    }\n\n    /**\n     * @percentagePlayed (getter)\n     * @return {Int} the percentage of how much of the audio has 'played'\n     */\n    get percentagePlayed() {\n      return (100 * this.sourcePosition) / (this.duration * this.sampleRate);\n    }\n\n    /**\n     * @percentagePlayed (setter)\n     * @param {Float} percentage - the percentage at which to set the 'playHead'\n     */\n    set percentagePlayed(percentage) {\n      const { duration, sampleRate } = this;\n      // calculate exact sampleFrame position, in the audioBuffer\n      this.sourcePosition = parseInt(\n        duration * sampleRate * (percentage / 100)\n      );\n      // send message to the Worklet to update the sourcePosition\n      this._updateFilterProp('sourcePosition', this.sourcePosition);\n      // set the SoundTouchNode.currentTime to the proper time\n      this.currentTime = (this.duration * percentage) / 100;\n    }\n\n    /**\n     * @currentTime (getter)\n     * @return {Float} the SoundTouchNode.currentTime (which is in seconds)\n     *\n     * The filter no longer updates the Node, as it's running in the worklet and\n     * messaging latency would cause it to be off. As such, if the Node is not\n     * 'playing' then the value has been updated, otherwise the value is derived\n     * from the last known 'playHead' position plus the difference in 'startTime'\n     * and 'now' (both are in milliseconds, so we calculate the difference in seconds)\n     */\n    get currentTime() {\n      if (!this.playing) {\n        return this._playHead;\n      }\n      return this._playHead + diffSecs(this._startTime, new Date().getTime());\n    }\n\n    /**\n     * @currentTime (setter)\n     * @param {Float} val - the time (in seconds) at which to set the 'playHead'\n     */\n    set currentTime(val) {\n      this._playHead = val;\n    }\n\n    /**\n     * @playing (getter)\n     * @return {Boolean} is the SoundTouchNode 'playing'\n     */\n    get playing() {\n      return this._playing;\n    }\n\n    /**\n     * @playing (setter)\n     * @param {Boolean} val - is the SoundTouchNode 'playing'\n     */\n    set playing(val) {\n      this._playing = Boolean(val);\n    }\n\n    /**\n     * @ready (getter)\n     * @return {Boolean} is the SoundTouchNode 'ready'\n     */\n    get ready() {\n      return this._ready;\n    }\n\n    /**\n     * @ready (setter)\n     * @param {Boolean} val - is the SoundTouchNode 'ready'\n     */\n    set ready(val) {\n      this._ready = Boolean(val);\n    }\n\n    /**\n     * @sampleRate (getter)\n     * @return {Int|undefined} if the audioBuffer has been set it returns the buffer's 'sampleRate',\n     *   otherwise returns undefined\n     */\n    get sampleRate() {\n      if (this.audioBuffer) {\n        return this.audioBuffer.sampleRate;\n      }\n      return undefined;\n    }\n\n    /**\n     * @duration (getter)\n     * @return {Float|undefined} if the audioBuffer has been set it returns the buffer's 'duration'\n     *   (in seconds), otherwise returns undefined\n     */\n    get duration() {\n      if (this.audioBuffer) {\n        return this.audioBuffer.duration;\n      }\n      return undefined;\n    }\n\n    /**\n     * @bufferLength (getter)\n     * @return {Int|undefined} if the audioBuffer has been set it returns the buffer's 'length',\n     *   otherwise returns undefined\n     */\n    get bufferLength() {\n      if (this.audioBuffer) {\n        return this.audioBuffer.length;\n      }\n      return undefined;\n    }\n\n    /**\n     * @numberOfChannels (getter)\n     * @return {Int|undefined} if the audioBuffer has been set it returns the buffer's 'numberOfChannels'\n     *   otherwise returns undefined\n     */\n    get numberOfChannels() {\n      if (this.audioBuffer) {\n        return this.audioBuffer.numberOfChannels;\n      }\n      return undefined;\n    }\n\n    /* AudioWorkletProcessor SimpleFilter params*/\n    // TODO: convert these to true AudioParams, at some point\n    /**\n     * @pitch (setter) [NO GETTER]\n     * @param {Float} pitch - the 'pitch' value to send to the SoundTouch instance in the Worklet\n     */\n    set pitch(pitch) {\n      this._updatePipeProp('pitch', pitch);\n    }\n\n    /**\n     * @pitchSemitones (setter) [NO GETTER]\n     * @param {Float} semitone - the 'pitchSemitones' value (key change) to send to the SoundTouch instance in the Worklet\n     */\n    set pitchSemitones(semitone) {\n      this._updatePipeProp('pitchSemitones', semitone);\n    }\n\n    /**\n     * @rate (setter) [NO GETTER]\n     * @param {Float} rate - the 'rate' value to send to the SoundTouch instance in the Worklet\n     */\n    set rate(rate) {\n      this._updatePipeProp('rate', rate);\n    }\n\n    /**\n     * @tempo (setter) [NO GETTER]\n     * @param {Float} tempo - the 'tempo' value to send to the SoundTouch instance in the Worklet\n     */\n    set tempo(tempo) {\n      this._updatePipeProp('tempo', tempo);\n    }\n    /* AudioWorkletProcessor SimpleFilter params*/\n\n    /**\n     * @connectToBuffer\n     * Creates a BufferSourceNode and attaches the 'audioBuffer' that was created by\n     * 'decodeAudioData()'. Then it connects the SoundTouchNode to the BufferSourceNode.\n     * This means that audio travels FROM the BufferSourceNode TO the SoundTouchNode.\n     * As the 'target', SoundTouchNode receives sound data to process it.\n     */\n    connectToBuffer() {\n      this.bufferNode = this.context.createBufferSource();\n      this.bufferNode.buffer = this.audioBuffer;\n      this.bufferNode.onended = () => console.log('song ended');\n      this.bufferNode.connect(this);\n      return this.bufferNode;\n    }\n\n    /**\n     * @disconnectFrom Buffer\n     * This severs the connection between the BufferSourceNode and the SoundTouchNode\n     */\n    disconnectFromBuffer() {\n      this.bufferNode.disconnect();\n    }\n\n    /**\n     * @handleAudioData\n     * @param {AudioBuffer} audioBuffer - created by AudioContext.decodeAudioData()\n     */\n    handleAudioData(audioBuffer) {\n      this.audioBuffer = audioBuffer;\n      // creates a simple data structure to transfer to the Worklet, based on the audioBuffer\n      this.port.postMessage({\n        message: 'INITIALIZE_PROCESSOR',\n        detail: this.createBaseArray(audioBuffer),\n      });\n    }\n\n    /**\n     * @createBaseArray\n     * @param {AudioBuffer} audioBuffer - created by AudioContext.decodeAudioData()\n     * @return {Array} an array of values to transfer to the Worklet\n     *   Array[0]\n     *     {Int} sampleRate - the sampleRate of the audioBuffer\n     *     {Float} duration - the duration of the audioBuffer (in seconds)\n     *     {Int} bufferLength - the length of the audioBuffer\n     *     {Int} numberOfChannels - the numberOfChannels of the audioBuffer\n     *   Array[1]\n     *     {Float32Array} - the left channel channelData of the audioBuffer\n     *   Array[2]\n     *     {Float32Array} - the right channel channelData of the audioBuffer\n     *       if only a single channel in the input, it will send the left channel\n     *       channelData as the right channel\n     */\n    createBaseArray(audioBuffer) {\n      return [\n        {\n          sampleRate: this.sampleRate,\n          duration: this.duration,\n          bufferLength: this.bufferLength,\n          numberOfChannels: this.numberOfChannels,\n        },\n        audioBuffer.getChannelData(0),\n        this.numberOfChannels > 1\n          ? audioBuffer.getChannelData(1)\n          : audioBuffer.getChannelData(0),\n      ];\n    }\n\n    /* play controls */\n    /**\n     * @play (async)\n     * @param {Float} offset - the time (in seconds) to play from, defaulting to SoundTouchNode.currentTime\n     */\n    async play() {\n      if (!this.ready) {\n        throw new Error('Your processor is not ready yet');\n      }\n      if (this.playing) {\n        this.stop(true);\n      }\n      // due to issue with standardized-audio-implementation\n      if (this._initialPlay) {\n        if (this._playHead === 0) {\n          this.percentagePlayed = 0;\n        }\n        this._initialPlay = false;\n      }\n      // start the BufferSourceNode processing immediately from this time\n      //this.bufferNode.start(0, offset);\n      await this.context.resume();\n      // reset the 'startTime' tracking variable\n      this._startTime = new Date().getTime();\n      // set the SoundTouchNode to 'playing'\n      this.playing = true;\n    }\n\n    pause() {\n      // get the current (derived) SoundTouchNode.currentTime\n      const currTime = this.currentTime;\n      this.stop();\n      // 'stop()' reset the SoundTouchNode.currentTime, so we set it back\n      this.currentTime = currTime;\n    }\n\n    async stop() {\n      // stop the BufferSourceNode from processing immediately\n      //this.bufferNode.stop(0);\n      await this.context.suspend();\n      // reset time tracking variables\n      this.currentTime = 0;\n      this._startTime = new Date().getTime();\n      // set the SoundTouchNode to not 'playing'\n      this.playing = false;\n    }\n    /* end play controls */\n\n    /* event listener handling */\n    /**\n     * @on\n     * @param {String} eventName - name of new event listener to 'addEventListener'\n     * @param {Function} cb - the callback of the new event listener\n     * Event listeners are also stored in an array, for use by 'off()'\n     */\n    on(eventName, cb) {\n      this.listeners.push({ name: eventName, cb: cb });\n      this.addEventListener(eventName, (event) => cb(event.detail));\n    }\n\n    /**\n     * @off\n     * @param {null|String} eventName - the 'name of the event listener to remove (removeEventListener)\n     *   If a 'name' is passed, we find all of the listeners with that name, in the listeners array, and remove them.\n     *   If no 'name' was passed, we remove all of the event listeners in the listeners array\n     */\n    off(eventName = null) {\n      let listeners = this.listeners;\n      if (eventName) {\n        listeners = listeners.filter((e) => e.name === eventName);\n      }\n      listeners.forEach((e) => {\n        this.removeEventListener(e.name, (event) => e.cb(event.detail));\n      });\n    }\n    /* end event listener handling */\n\n    /**\n     * @onprocessorerror\n     * @param {Error} err - the Error passed from the Worklet to the Node if there is an\n     * error in the Worklet's 'process()'.\n     */\n    onprocessorerror(err) {\n      // just throw worklet errors for now\n      throw err;\n    }\n\n    /**\n     * @_updatePipeProp\n     * @param {String} name - the name of the SoundTouch property to set\n     * @param {*} value - the value of the SoundTouch property to set\n     */\n    _updatePipeProp(name, value) {\n      // console.log(`Changing ${name} to ${value}`);\n      // send message to the Worklet to set the SoundTouch instance's property\n      this.port.postMessage({\n        message: 'SET_PIPE_PROP',\n        detail: { name, value },\n      });\n    }\n\n    /**\n     * @_updateFilterProp\n     * @param {String} name - the name of the SimpleFilter property to set\n     * @param {*} value - the value of the SimpleFilter property to set\n     */\n    _updateFilterProp(name, value) {\n      //console.log(`Changing ${name} to ${value}`); debugging\n      // send message to the Worklet to set the SimpleFilter instance's property\n      this.port.postMessage({\n        message: 'SET_FILTER_PROP',\n        detail: { name, value },\n      });\n    }\n\n    /**\n     * @_messageProcessor\n     * @param {*} eventFromWorker - the message 'event' sent from the AudioWorkletProcessor\n     *   eventFromWorker.data {*} - the actual 'message'\n     *     message {String} - the message string\n     *     detail {Transferable} - any serializable data sent with the message\n     */\n    _messageProcessor(eventFromWorker) {\n      const { message, detail } = eventFromWorker.data;\n      const { sampleRate, timePlayed: currentTime } = this;\n\n      if (message === 'SOURCEPOSITION') {\n        this.sourcePosition = detail;\n        const timePlayed = detail / sampleRate;\n        if (currentTime !== timePlayed) {\n          this.timePlayed = timePlayed;\n          const timeEvent = new CustomEvent('play', {\n            // we calculate all values based on the one call (above) to get the currentTime\n            detail: {\n              timePlayed: this.timePlayed,\n              formattedTimePlayed: this.formattedTimePlayed,\n              percentagePlayed: this.percentagePlayed,\n            },\n          });\n          this.dispatchEvent(timeEvent);\n        }\n      }\n\n      if (message === 'PROCESSOR_CONSTRUCTOR') {\n        // console.log('processor constructor: ', detail);\n        // The AudioWorkletProcessor object is instantiated, so we can now decode the raw audio.\n        // The 'handleAudioData()' method will send a message back to the AudioWorkletProcessor\n        this.context.decodeAudioData(\n          this._arrayBuffer,\n          (audioData) => this.handleAudioData(audioData),\n          (err) => console.log('[decodeAudioData ERROR] ', err)\n        );\n        return;\n      }\n\n      if (message === 'PROCESSOR_READY') {\n        /**\n         * The AudioWorkletProcessor (SoundTouchWorklet) has received the bits it needs\n         * to begin processing, so the AudioWorkletNode (SoundTouchNode) is now\n         * 'ready' for use\n         */\n        this.ready = true;\n\n        // tell the using interface that the SoundTouchNode is 'ready'\n        // 'detail' is empty, but there for enabling debugging\n\n        // this is here for backwards compatability\n        if (typeof this.onInitialized === 'function') {\n          this.onInitialized(detail);\n          return;\n        }\n\n        // preferred method of letting the interface know we're ready\n        const init = new CustomEvent('initialized', detail);\n        this.dispatchEvent(init);\n        return;\n      }\n\n      /**\n       * called by the AudioWorkletProcessor (SoundTouchWorklet) to tell us\n       * that it's done with all of the available data in the audioBuffer\n       */\n      if (message === 'PROCESSOR_END') {\n        this.stop();\n        this.percentagePlayed = 0;\n        const endOfPlay = new CustomEvent('end', {\n          detail: {\n            timePlayed: this.currentTime,\n            formattedTimePlayed: this.formattedTimePlayed,\n            percentagePlayed: this.percentagePlayed,\n          },\n        });\n        this.dispatchEvent(endOfPlay);\n        return;\n      }\n\n      //console.log('[SoundTouchNode] Unknown message: ', eventFromWorker); // debugging\n    }\n  }\n\n  return new SoundTouchNode(audioCtx, arrayBuffer, options);\n};\n\nexport default createSoundTouchNode;\n"],"names":["pad","n","width","z","length","Array","join","minsSecs","secs","mins","Math","floor","seconds","parseInt","diffSecs","ms1","ms2","createSoundTouchNode","audioCtx","AudioWorkletNode","arrayBuffer","options","SoundTouchNode","context","_arrayBuffer","slice","listeners","port","onmessage","_messageProcessor","bind","sourcePosition","timePlayed","_startTime","_pauseTime","_playHead","_playing","_ready","_initialPlay","duration","sampleRate","percentage","_updateFilterProp","currentTime","playing","Date","getTime","val","Boolean","audioBuffer","undefined","numberOfChannels","pitch","_updatePipeProp","semitone","rate","tempo","bufferNode","createBufferSource","buffer","onended","console","log","connect","disconnect","postMessage","message","detail","createBaseArray","bufferLength","getChannelData","ready","Error","stop","percentagePlayed","resume","currTime","suspend","eventName","cb","push","name","addEventListener","event","filter","e","forEach","removeEventListener","err","value","eventFromWorker","data","timeEvent","CustomEvent","formattedTimePlayed","dispatchEvent","decodeAudioData","audioData","handleAudioData","onInitialized","init","endOfPlay"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,GAAG,GAAG,SAANA,GAAM,CAAUC,CAAV,EAAaC,KAAb,EAAoBC,CAApB,EAAuB;EACjCA,CAAC,GAAGA,CAAC,IAAI,GAAT,CAAA;EACAF,CAAC,GAAGA,CAAC,GAAG,EAAR,CAAA;EACA,OAAOA,CAAC,CAACG,MAAF,IAAYF,KAAZ,GAAoBD,CAApB,GAAwB,IAAII,KAAJ,CAAUH,KAAK,GAAGD,CAAC,CAACG,MAAV,GAAmB,CAA7B,EAAgCE,IAAhC,CAAqCH,CAArC,CAAA,GAA0CF,CAAzE,CAAA;AACD,CAJD,CAAA;AAMA,IAAMM,QAAQ,GAAG,SAAXA,QAAW,CAAUC,IAAV,EAAgB;EAC/B,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAb,CAAA;AACA,EAAA,IAAMI,OAAO,GAAGJ,IAAI,GAAGC,IAAI,GAAG,EAA9B,CAAA;EACA,OAAUA,EAAAA,CAAAA,MAAAA,CAAAA,IAAV,EAAkBT,GAAAA,CAAAA,CAAAA,MAAAA,CAAAA,GAAG,CAACa,QAAQ,CAACD,OAAD,CAAT,EAAoB,CAApB,CAArB,CAAA,CAAA;AACD,CAJD,CAAA;AAMO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC1C,EAAA,OAAO,CAACA,GAAG,GAAGD,GAAP,IAAc,IAArB,CAAA;AACD,CAFM;;ACAP,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BC,QAD2B,EAE3BC,gBAF2B,EAG3BC,WAH2B,EAI3BC,OAJ2B,EAKxB;AAAA,EAAA,IACGC,cADH,GAAA,UAAA,iBAAA,EAAA;AAAA,IAAA,SAAA,CAAA,cAAA,EAAA,iBAAA,CAAA,CAAA;AAAA,IAAA,IAAA,MAAA,GAAA,YAAA,CAAA,cAAA,CAAA,CAAA;AASD,IAAA,SAAA,cAAA,CAAYC,OAAZ,EAAqBH,WAArB,EAAkCC,OAAlC,EAA2C;AAAA,MAAA,IAAA,KAAA,CAAA;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAA;AACzC,MAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAME,OAAN,EAAe,oBAAf,EAAqCF,OAArC,EADyC;MAIzC,KAAKG,CAAAA,YAAL,GAAoBJ,WAAW,CAACK,KAAZ,CAAkB,CAAlB,CAApB,CAJyC;AAMzC,MAAA,KAAA,CAAKC,SAAL,GAAiB,EAAjB,CANyC;MAQzC,KAAKC,CAAAA,IAAL,CAAUC,SAAV,GAAsB,MAAKC,iBAAL,CAAuBC,IAAvB,CAAtB,sBAAA,CAAA,KAAA,CAAA,CAAA,CAAA;MAEA,KAAKC,CAAAA,cAAL,GAAsB,CAAtB,CAAA;MACA,KAAKC,CAAAA,UAAL,GAAkB,CAAlB,CAAA;MACA,KAAKC,CAAAA,UAAL,GAAkB,CAAlB,CAAA;MACA,KAAKC,CAAAA,UAAL,GAAkB,CAAlB,CAAA;MACA,KAAKC,CAAAA,SAAL,GAAiB,CAAjB,CAAA;MAEA,KAAKC,CAAAA,QAAL,GAAgB,KAAhB,CAAA;AACA,MAAA,KAAA,CAAKC,MAAL,GAAc,KAAd,CAjByC;MAmBzC,KAAKC,CAAAA,YAAL,GAAoB,IAApB,CAAA;AAnByC,MAAA,OAAA,KAAA,CAAA;AAoB1C,KAAA;AA7BA,IAAA,YAAA,CAAA,cAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,mBAAA;AAAA,MAAA,GAAA,EAmCD,SAAwB,GAAA,GAAA;AACtB,QAAA,OAAO/B,QAAQ,CAAC,IAAKgC,CAAAA,QAAN,CAAf,CAAA;AACD,OAAA;AArCA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,qBAAA;AAAA,MAAA,GAAA,EA2CD,SAA0B,GAAA,GAAA;AACxB,QAAA,OAAOhC,QAAQ,CAAC,IAAKyB,CAAAA,UAAN,CAAf,CAAA;AACD,OAAA;AA7CA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,kBAAA;AAAA,MAAA,GAAA,EAmDD,SAAuB,GAAA,GAAA;QACrB,OAAQ,GAAA,GAAM,KAAKD,cAAZ,IAA+B,KAAKQ,QAAL,GAAgB,IAAKC,CAAAA,UAApD,CAAP,CAAA;AACD,OAAA;AArDA;MAAA,GA2DD,EAAA,SAAA,GAAA,CAAqBC,UAArB,EAAiC;AAC/B,QAAA,IAAQF,QAAR,GAAiC,IAAjC,CAAQA,QAAR;AAAA,YAAkBC,UAAlB,GAAiC,IAAjC,CAAkBA,UAAlB,CAD+B;AAG/B,QAAA,IAAA,CAAKT,cAAL,GAAsBlB,QAAQ,CAC5B0B,QAAQ,GAAGC,UAAX,IAAyBC,UAAU,GAAG,GAAtC,CAD4B,CAA9B,CAH+B;AAO/B,QAAA,IAAA,CAAKC,iBAAL,CAAuB,gBAAvB,EAAyC,IAAKX,CAAAA,cAA9C,EAP+B;AAS/B,QAAA,IAAA,CAAKY,WAAL,GAAoB,IAAA,CAAKJ,QAAL,GAAgBE,UAAjB,GAA+B,GAAlD,CAAA;AACD,OAAA;AArEA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,aAAA;AAAA,MAAA,GAAA,EAiFD,SAAkB,GAAA,GAAA;QAChB,IAAI,CAAC,IAAKG,CAAAA,OAAV,EAAmB;AACjB,UAAA,OAAO,KAAKT,SAAZ,CAAA;AACD,SAAA;AACD,QAAA,OAAO,IAAKA,CAAAA,SAAL,GAAiBrB,QAAQ,CAAC,IAAA,CAAKmB,UAAN,EAAkB,IAAIY,IAAJ,EAAWC,CAAAA,OAAX,EAAlB,CAAhC,CAAA;AACD,OAAA;AAtFA;MAAA,GA4FD,EAAA,SAAA,GAAA,CAAgBC,GAAhB,EAAqB;QACnB,IAAKZ,CAAAA,SAAL,GAAiBY,GAAjB,CAAA;AACD,OAAA;AA9FA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,SAAA;AAAA,MAAA,GAAA,EAoGD,SAAc,GAAA,GAAA;AACZ,QAAA,OAAO,KAAKX,QAAZ,CAAA;AACD,OAAA;AAtGA;MAAA,GA4GD,EAAA,SAAA,GAAA,CAAYW,GAAZ,EAAiB;AACf,QAAA,IAAA,CAAKX,QAAL,GAAgBY,OAAO,CAACD,GAAD,CAAvB,CAAA;AACD,OAAA;AA9GA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,OAAA;AAAA,MAAA,GAAA,EAoHD,SAAY,GAAA,GAAA;AACV,QAAA,OAAO,KAAKV,MAAZ,CAAA;AACD,OAAA;AAtHA;MAAA,GA4HD,EAAA,SAAA,GAAA,CAAUU,GAAV,EAAe;AACb,QAAA,IAAA,CAAKV,MAAL,GAAcW,OAAO,CAACD,GAAD,CAArB,CAAA;AACD,OAAA;AA9HA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,YAAA;AAAA,MAAA,GAAA,EAqID,SAAiB,GAAA,GAAA;QACf,IAAI,IAAA,CAAKE,WAAT,EAAsB;UACpB,OAAO,IAAA,CAAKA,WAAL,CAAiBT,UAAxB,CAAA;AACD,SAAA;AACD,QAAA,OAAOU,SAAP,CAAA;AACD,OAAA;AA1IA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,UAAA;AAAA,MAAA,GAAA,EAiJD,SAAe,GAAA,GAAA;QACb,IAAI,IAAA,CAAKD,WAAT,EAAsB;UACpB,OAAO,IAAA,CAAKA,WAAL,CAAiBV,QAAxB,CAAA;AACD,SAAA;AACD,QAAA,OAAOW,SAAP,CAAA;AACD,OAAA;AAtJA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,cAAA;AAAA,MAAA,GAAA,EA6JD,SAAmB,GAAA,GAAA;QACjB,IAAI,IAAA,CAAKD,WAAT,EAAsB;UACpB,OAAO,IAAA,CAAKA,WAAL,CAAiB7C,MAAxB,CAAA;AACD,SAAA;AACD,QAAA,OAAO8C,SAAP,CAAA;AACD,OAAA;AAlKA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,kBAAA;AAAA,MAAA,GAAA,EAyKD,SAAuB,GAAA,GAAA;QACrB,IAAI,IAAA,CAAKD,WAAT,EAAsB;UACpB,OAAO,IAAA,CAAKA,WAAL,CAAiBE,gBAAxB,CAAA;AACD,SAAA;AACD,QAAA,OAAOD,SAAP,CAAA;AACD,OAAA;AA9KA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,OAAA;MAAA,GAsLD,EAAA,SAAA,GAAA,CAAUE,KAAV,EAAiB;AACf,QAAA,IAAA,CAAKC,eAAL,CAAqB,OAArB,EAA8BD,KAA9B,CAAA,CAAA;AACD,OAAA;AAxLA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,gBAAA;MAAA,GA8LD,EAAA,SAAA,GAAA,CAAmBE,QAAnB,EAA6B;AAC3B,QAAA,IAAA,CAAKD,eAAL,CAAqB,gBAArB,EAAuCC,QAAvC,CAAA,CAAA;AACD,OAAA;AAhMA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,MAAA;MAAA,GAsMD,EAAA,SAAA,GAAA,CAASC,IAAT,EAAe;AACb,QAAA,IAAA,CAAKF,eAAL,CAAqB,MAArB,EAA6BE,IAA7B,CAAA,CAAA;AACD,OAAA;AAxMA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,OAAA;MAAA,GA8MD,EAAA,SAAA,GAAA,CAAUC,KAAV,EAAiB;AACf,QAAA,IAAA,CAAKH,eAAL,CAAqB,OAArB,EAA8BG,KAA9B,CAAA,CAAA;AACD,OAAA;AAhNA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,iBAAA;AAAA,MAAA,KAAA,EA0ND,SAAkB,eAAA,GAAA;AAChB,QAAA,IAAA,CAAKC,UAAL,GAAkB,IAAA,CAAKlC,OAAL,CAAamC,kBAAb,EAAlB,CAAA;AACA,QAAA,IAAA,CAAKD,UAAL,CAAgBE,MAAhB,GAAyB,KAAKV,WAA9B,CAAA;QACA,IAAKQ,CAAAA,UAAL,CAAgBG,OAAhB,GAA0B,YAAA;AAAA,UAAA,OAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN,CAAA;SAA1B,CAAA;AACA,QAAA,IAAA,CAAKL,UAAL,CAAgBM,OAAhB,CAAwB,IAAxB,CAAA,CAAA;AACA,QAAA,OAAO,KAAKN,UAAZ,CAAA;AACD,OAAA;AAhOA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,sBAAA;AAAA,MAAA,KAAA,EAsOD,SAAuB,oBAAA,GAAA;QACrB,IAAKA,CAAAA,UAAL,CAAgBO,UAAhB,EAAA,CAAA;AACD,OAAA;AAxOA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,iBAAA;MAAA,KA8OD,EAAA,SAAA,eAAA,CAAgBf,WAAhB,EAA6B;AAC3B,QAAA,IAAA,CAAKA,WAAL,GAAmBA,WAAnB,CAD2B;QAG3B,IAAKtB,CAAAA,IAAL,CAAUsC,WAAV,CAAsB;AACpBC,UAAAA,OAAO,EAAE,sBADW;AAEpBC,UAAAA,MAAM,EAAE,IAAA,CAAKC,eAAL,CAAqBnB,WAArB,CAAA;SAFV,CAAA,CAAA;AAID,OAAA;AArPA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,iBAAA;MAAA,KAuQD,EAAA,SAAA,eAAA,CAAgBA,WAAhB,EAA6B;AAC3B,QAAA,OAAO,CACL;UACET,UAAU,EAAE,KAAKA,UADnB;UAEED,QAAQ,EAAE,KAAKA,QAFjB;UAGE8B,YAAY,EAAE,KAAKA,YAHrB;AAIElB,UAAAA,gBAAgB,EAAE,IAAKA,CAAAA,gBAAAA;SALpB,EAOLF,WAAW,CAACqB,cAAZ,CAA2B,CAA3B,CAPK,EAQL,IAAA,CAAKnB,gBAAL,GAAwB,CAAxB,GACIF,WAAW,CAACqB,cAAZ,CAA2B,CAA3B,CADJ,GAEIrB,WAAW,CAACqB,cAAZ,CAA2B,CAA3B,CAVC,CAAP,CAAA;AAYD,OAAA;AApRA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,MAAA;AAAA,MAAA,KAAA,EAAA,YAAA;QAAA,IA2RD,KAAA,GAAA,iBAAA,EAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,OAAA,GAAA;AAAA,UAAA,OAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA;AAAA,cAAA,QAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,gBAAA,KAAA,CAAA;AAAA,kBAAA,IACO,KAAKC,KADZ,EAAA;AAAA,oBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,oBAAA,MAAA;AAAA,mBAAA;AAAA,kBAAA,MAEU,IAAIC,KAAJ,CAAU,iCAAV,CAFV,CAAA;AAAA,gBAAA,KAAA,CAAA;kBAIE,IAAI,IAAA,CAAK5B,OAAT,EAAkB;oBAChB,IAAK6B,CAAAA,IAAL,CAAU,IAAV,CAAA,CAAA;AACD,mBANH;kBAQE,IAAI,IAAA,CAAKnC,YAAT,EAAuB;AACrB,oBAAA,IAAI,IAAKH,CAAAA,SAAL,KAAmB,CAAvB,EAA0B;sBACxB,IAAKuC,CAAAA,gBAAL,GAAwB,CAAxB,CAAA;AACD,qBAAA;oBACD,IAAKpC,CAAAA,YAAL,GAAoB,KAApB,CAAA;AACD,mBAbH;AAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,OAgBQ,IAAKf,CAAAA,OAAL,CAAaoD,MAAb,EAhBR,CAAA;AAAA,gBAAA,KAAA,CAAA;kBAkBE,IAAK1C,CAAAA,UAAL,GAAkB,IAAIY,IAAJ,GAAWC,OAAX,EAAlB,CAlBF;kBAoBE,IAAKF,CAAAA,OAAL,GAAe,IAAf,CAAA;AApBF,gBAAA,KAAA,CAAA,CAAA;AAAA,gBAAA,KAAA,KAAA;AAAA,kBAAA,OAAA,QAAA,CAAA,IAAA,EAAA,CAAA;AAAA,eAAA;AAAA,aAAA;AAAA,WAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA;SA3RC,CAAA,CAAA,CAAA;AAAA,QAAA,SAAA,IAAA,GAAA;AAAA,UAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAA,IAAA,CAAA;AAAA,OAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,OAAA;AAAA,MAAA,KAAA,EAkTD,SAAQ,KAAA,GAAA;QAEN,IAAMgC,QAAQ,GAAG,IAAA,CAAKjC,WAAtB,CAAA;QACA,IAAK8B,CAAAA,IAAL,GAHM;QAKN,IAAK9B,CAAAA,WAAL,GAAmBiC,QAAnB,CAAA;AACD,OAAA;AAxTA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,MAAA;AAAA,MAAA,KAAA,EAAA,YAAA;QAAA,IA0TD,KAAA,GAAA,iBAAA,EAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,GAAA;AAAA,UAAA,OAAA,kBAAA,CAAA,IAAA,CAAA,SAAA,SAAA,CAAA,SAAA,EAAA;AAAA,YAAA,OAAA,CAAA,EAAA;AAAA,cAAA,QAAA,SAAA,CAAA,IAAA,GAAA,SAAA,CAAA,IAAA;AAAA,gBAAA,KAAA,CAAA;AAAA,kBAAA,SAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AAAA,kBAAA,OAGQ,IAAKrD,CAAAA,OAAL,CAAasD,OAAb,EAHR,CAAA;AAAA,gBAAA,KAAA,CAAA;kBAKE,IAAKlC,CAAAA,WAAL,GAAmB,CAAnB,CAAA;kBACA,IAAKV,CAAAA,UAAL,GAAkB,IAAIY,IAAJ,GAAWC,OAAX,EAAlB,CANF;kBAQE,IAAKF,CAAAA,OAAL,GAAe,KAAf,CAAA;AARF,gBAAA,KAAA,CAAA,CAAA;AAAA,gBAAA,KAAA,KAAA;AAAA,kBAAA,OAAA,SAAA,CAAA,IAAA,EAAA,CAAA;AAAA,eAAA;AAAA,aAAA;AAAA,WAAA,EAAA,QAAA,EAAA,IAAA,CAAA,CAAA;SA1TC,CAAA,CAAA,CAAA;AAAA,QAAA,SAAA,IAAA,GAAA;AAAA,UAAA,OAAA,KAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,OAAA,IAAA,CAAA;AAAA,OAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,IAAA;AAAA,MAAA,KAAA,EA6UD,SAAGkC,EAAAA,CAAAA,SAAH,EAAcC,EAAd,EAAkB;QAChB,IAAKrD,CAAAA,SAAL,CAAesD,IAAf,CAAoB;AAAEC,UAAAA,IAAI,EAAEH,SAAR;AAAmBC,UAAAA,EAAE,EAAEA,EAAAA;SAA3C,CAAA,CAAA;AACA,QAAA,IAAA,CAAKG,gBAAL,CAAsBJ,SAAtB,EAAiC,UAACK,KAAD,EAAA;AAAA,UAAA,OAAWJ,EAAE,CAACI,KAAK,CAAChB,MAAP,CAAb,CAAA;SAAjC,CAAA,CAAA;AACD,OAAA;AAhVA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,KAAA;AAAA,MAAA,KAAA,EAwVD,SAAsB,GAAA,GAAA;AAAA,QAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QAAA,IAAlBW,SAAkB,uEAAN,IAAM,CAAA;QACpB,IAAIpD,SAAS,GAAG,IAAA,CAAKA,SAArB,CAAA;AACA,QAAA,IAAIoD,SAAJ,EAAe;AACbpD,UAAAA,SAAS,GAAGA,SAAS,CAAC0D,MAAV,CAAiB,UAACC,CAAD,EAAA;AAAA,YAAA,OAAOA,CAAC,CAACJ,IAAF,KAAWH,SAAlB,CAAA;AAAA,WAAjB,CAAZ,CAAA;AACD,SAAA;AACDpD,QAAAA,SAAS,CAAC4D,OAAV,CAAkB,UAACD,CAAD,EAAO;UACvB,MAAI,CAACE,mBAAL,CAAyBF,CAAC,CAACJ,IAA3B,EAAiC,UAACE,KAAD,EAAA;AAAA,YAAA,OAAWE,CAAC,CAACN,EAAF,CAAKI,KAAK,CAAChB,MAAX,CAAX,CAAA;WAAjC,CAAA,CAAA;SADF,CAAA,CAAA;AAGD,OAAA;AAhWA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,kBAAA;MAAA,KAwWD,EAAA,SAAA,gBAAA,CAAiBqB,GAAjB,EAAsB;AAEpB,QAAA,MAAMA,GAAN,CAAA;AACD,OAAA;AA3WA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,iBAAA;AAAA,MAAA,KAAA,EAkXD,SAAgBP,eAAAA,CAAAA,IAAhB,EAAsBQ,KAAtB,EAA6B;QAG3B,IAAK9D,CAAAA,IAAL,CAAUsC,WAAV,CAAsB;AACpBC,UAAAA,OAAO,EAAE,eADW;AAEpBC,UAAAA,MAAM,EAAE;AAAEc,YAAAA,IAAI,EAAJA,IAAF;AAAQQ,YAAAA,KAAK,EAALA,KAAAA;AAAR,WAAA;SAFV,CAAA,CAAA;AAID,OAAA;AAzXA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,mBAAA;AAAA,MAAA,KAAA,EAgYD,SAAkBR,iBAAAA,CAAAA,IAAlB,EAAwBQ,KAAxB,EAA+B;QAG7B,IAAK9D,CAAAA,IAAL,CAAUsC,WAAV,CAAsB;AACpBC,UAAAA,OAAO,EAAE,iBADW;AAEpBC,UAAAA,MAAM,EAAE;AAAEc,YAAAA,IAAI,EAAJA,IAAF;AAAQQ,YAAAA,KAAK,EAALA,KAAAA;AAAR,WAAA;SAFV,CAAA,CAAA;AAID,OAAA;AAvYA,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,mBAAA;MAAA,KAgZD,EAAA,SAAA,iBAAA,CAAkBC,eAAlB,EAAmC;AAAA,QAAA,IAAA,MAAA,GAAA,IAAA,CAAA;QACjC,IAA4BA,qBAAAA,GAAAA,eAAe,CAACC,IAA5C;YAAQzB,OAAR,yBAAQA,OAAR;YAAiBC,MAAjB,yBAAiBA,MAAjB,CAAA;AACA,QAAA,IAAQ3B,UAAR,GAAgD,IAAhD,CAAQA,UAAR;AAAA,YAAgCG,WAAhC,GAAgD,IAAhD,CAAoBX,UAApB,CAAA;QAEA,IAAIkC,OAAO,KAAK,gBAAhB,EAAkC;UAChC,IAAKnC,CAAAA,cAAL,GAAsBoC,MAAtB,CAAA;AACA,UAAA,IAAMnC,UAAU,GAAGmC,MAAM,GAAG3B,UAA5B,CAAA;UACA,IAAIG,WAAW,KAAKX,UAApB,EAAgC;YAC9B,IAAKA,CAAAA,UAAL,GAAkBA,UAAlB,CAAA;AACA,YAAA,IAAM4D,SAAS,GAAG,IAAIC,WAAJ,CAAgB,MAAhB,EAAwB;AAExC1B,cAAAA,MAAM,EAAE;gBACNnC,UAAU,EAAE,KAAKA,UADX;gBAEN8D,mBAAmB,EAAE,KAAKA,mBAFpB;AAGNpB,gBAAAA,gBAAgB,EAAE,IAAKA,CAAAA,gBAAAA;AAHjB,eAAA;AAFgC,aAAxB,CAAlB,CAAA;YAQA,IAAKqB,CAAAA,aAAL,CAAmBH,SAAnB,CAAA,CAAA;AACD,WAAA;AACF,SAAA;QAED,IAAI1B,OAAO,KAAK,uBAAhB,EAAyC;UAIvC,IAAK3C,CAAAA,OAAL,CAAayE,eAAb,CACE,KAAKxE,YADP,EAEE,UAACyE,SAAD,EAAA;AAAA,YAAA,OAAe,MAAI,CAACC,eAAL,CAAqBD,SAArB,CAAf,CAAA;WAFF,EAGE,UAACT,GAAD,EAAA;AAAA,YAAA,OAAS3B,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwC0B,GAAxC,CAAT,CAAA;WAHF,CAAA,CAAA;AAKA,UAAA,OAAA;AACD,SAAA;QAED,IAAItB,OAAO,KAAK,iBAAhB,EAAmC;AAMjC,UAAA,IAAA,CAAKK,KAAL,GAAa,IAAb,CANiC;AAYjC,UAAA,IAAI,OAAO,IAAA,CAAK4B,aAAZ,KAA8B,UAAlC,EAA8C;YAC5C,IAAKA,CAAAA,aAAL,CAAmBhC,MAAnB,CAAA,CAAA;AACA,YAAA,OAAA;AACD,WAfgC;UAkBjC,IAAMiC,IAAI,GAAG,IAAIP,WAAJ,CAAgB,aAAhB,EAA+B1B,MAA/B,CAAb,CAAA;UACA,IAAK4B,CAAAA,aAAL,CAAmBK,IAAnB,CAAA,CAAA;AACA,UAAA,OAAA;AACD,SAAA;QAMD,IAAIlC,OAAO,KAAK,eAAhB,EAAiC;AAC/B,UAAA,IAAA,CAAKO,IAAL,EAAA,CAAA;UACA,IAAKC,CAAAA,gBAAL,GAAwB,CAAxB,CAAA;AACA,UAAA,IAAM2B,SAAS,GAAG,IAAIR,WAAJ,CAAgB,KAAhB,EAAuB;AACvC1B,YAAAA,MAAM,EAAE;cACNnC,UAAU,EAAE,KAAKW,WADX;cAENmD,mBAAmB,EAAE,KAAKA,mBAFpB;AAGNpB,cAAAA,gBAAgB,EAAE,IAAKA,CAAAA,gBAAAA;AAHjB,aAAA;AAD+B,WAAvB,CAAlB,CAAA;UAOA,IAAKqB,CAAAA,aAAL,CAAmBM,SAAnB,CAAA,CAAA;AACA,UAAA,OAAA;AACD,SAxEgC;AA2ElC,OAAA;AA3dA,KAAA,CAAA,CAAA,CAAA;AAAA,IAAA,OAAA,cAAA,CAAA;AAAA,GAAA,CAC0BlF,gBAD1B,CAAA,CAAA;EA8dH,OAAO,IAAIG,cAAJ,CAAmBJ,QAAnB,EAA6BE,WAA7B,EAA0CC,OAA1C,CAAP,CAAA;AACD;;;;"}